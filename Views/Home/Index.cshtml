@using Microsoft.EntityFrameworkCore
@using MenuShop
@model IEnumerable<MenuShop.Models.Product>
@{
    ViewData["Title"] = "Trang chủ";
    var categories = ViewBag.Categories as List<MenuShop.Models.Category>;
    var productsByCategory = Model.GroupBy(p => p.CategoryId).ToDictionary(g => g.Key, g => g.ToList());
}

<div class="container-fluid">
    <!-- Categories Section -->
    <div class="category-bar-sticky">
        <div class="row mb-2">
            <div class="col-12">
                <h4 class="mb-3"><i class="fas fa-tags me-2"></i>ProductCategories</h4>
                <div class="category-nav-sticky">
                    <div class="d-flex flex-row flex-nowrap gap-3 overflow-auto category-nav-scroll" id="categoryNav">
                        @if (categories != null)
                        {
                            foreach (var category in categories)
                            {
                                <a href="#category-@category.Id" class="text-decoration-none category-nav-link" data-category-id="@category.Id">
                                    <div class="card h-100 text-center category-card">
                                        <div class="card-body">
                                            @if (!string.IsNullOrEmpty(category.ImageUrl))
                                            {
                                                <img src="@category.ImageUrl" class="img-fluid rounded mb-2" alt="@category.Name" style="max-height: 60px; object-fit: cover;">
                                            }
                                            else
                                            {
                                                <i class="fas fa-box fa-2x text-muted mb-2"></i>
                                            }
                                            <h6 class="card-title mb-0">@category.Name</h6>
                                        </div>
                                    </div>
                                </a>
                            }
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="shop-products-scroll">
        @if (categories == null || !categories.Any())
        {
            <div class="row">
                <div class="col-12">
                    <div class="alert alert-info text-center">
                        <i class="fas fa-info-circle fa-2x mb-3"></i>
                        <h5>NoCategoryFound</h5>
                    </div>
                </div>
            </div>
        }
        else
        {
            foreach (var category in categories)
            {
                var products = productsByCategory.ContainsKey(category.Id) ? productsByCategory[category.Id] : new List<MenuShop.Models.Product>();
                <div class="category-section mb-5" id="category-@category.Id">
                    <div class="row mb-3">
                        <div class="col-12">
                            <h4 class="mb-2"><i class="fas fa-tag me-2"></i>@category.Name <small class="text-muted">(@products.Count Products)</small></h4>
                            @if (!string.IsNullOrEmpty(category.Description))
                            {
                                <p class="text-muted">@category.Description</p>
                            }
                        </div>
                    </div>
                    @if (!products.Any())
                    {
                        <div class="row">
                            <div class="col-12">
                                <div class="alert alert-info text-center">
                                    <i class="fas fa-info-circle fa-2x mb-3"></i>
                                    <h5>NoProductInCategory</h5>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row">
                            @foreach (var product in products)
                            {
                                <div class="col-6 col-md-4 col-lg-3 mb-4">
                                    <div class="card h-100 product-card">
                                        @if (product.Images != null && product.Images.Any())
                                        {
                                            <img src="@product.Images.First().ImageUrl" class="card-img-top" alt="@product.Name" style="height: 200px; object-fit: cover;">
                                        }
                                        else if (!string.IsNullOrEmpty(product.ImageUrl))
                                        {
                                            <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name" style="height: 200px; object-fit: cover;">
                                        }
                                        else
                                        {
                                            <div class="card-img-top bg-light d-flex align-items-center justify-content-center" style="height: 200px;">
                                                <i class="fas fa-image fa-3x text-muted"></i>
                                            </div>
                                        }
                                        <div class="card-body d-flex flex-column">
                                            <h6 class="card-title">@product.Name</h6>
                                            <p class="card-text text-muted small mb-2">@product.Category?.Name</p>
                                            @if (!string.IsNullOrEmpty(product.Description))
                                            {
                                                <p class="card-text small text-muted">@(product.Description.Length > 100 ? product.Description.Substring(0, 100) + "..." : product.Description)</p>
                                            }
                                            <div class="mt-auto">
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    @if (product.IsDiscountActive)
                                                    {
                                                        <div>
                                                            <span class="text-decoration-line-through text-muted small">@product.Price.ToString("N0") ₫</span><br>
                                                            <span class="text-danger fw-bold">@product.FinalPrice.ToString("N0") ₫</span>
                                                            <span class="badge bg-danger ms-1">-@product.DiscountPercent%</span>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-primary fw-bold">@product.Price.ToString("N0") ₫</span>
                                                    }
                                                    <span class="badge bg-secondary">@product.Stock</span>
                                                </div>
                                                <a href="@Url.Action("ProductDetail", "Home", new { id = product.Id })" class="btn btn-outline-primary btn-sm w-100 mb-2">
                                                    <i class="fas fa-eye me-1"></i>ViewDetail
                                                </a>
                                                <button type="button" class="btn btn-outline-success btn-sm w-100" onclick="shareProduct('@Url.Action("ProductDetail", "Home", new { id = product.Id }, protocol: Context.Request.Scheme)', '@product.Name')">
                                                    <i class="fas fa-share-alt me-1"></i>Share
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    }
                </div>
            }
        }
    </div>
</div>

@section Scripts {
    <script>
        // Scrollspy cho danh mục
        document.addEventListener('DOMContentLoaded', function() {
            const navLinks = document.querySelectorAll('.category-nav-link');
            const sections = Array.from(document.querySelectorAll('.category-section'));

            // Click vào nav scroll tới section
            navLinks.forEach(link => {
                link.addEventListener('click', function(e) {
                    e.preventDefault();
                    const id = this.getAttribute('href').replace('#', '');
                    const section = document.getElementById(id);
                    if (section) {
                        const headerHeight = document.querySelector('.shop-header-fixed').offsetHeight || 80;
                        window.scrollTo({
                            top: section.offsetTop - headerHeight - 10,
                            behavior: 'smooth'
                        });
                    }
                });
            });

            // Scrollspy
            function onScroll() {
                let scrollPos = window.scrollY || window.pageYOffset;
                let headerHeight = document.querySelector('.shop-header-fixed').offsetHeight || 80;
                let found = false;
                for (let i = sections.length - 1; i >= 0; i--) {
                    const section = sections[i];
                    if (scrollPos + headerHeight + 20 >= section.offsetTop) {
                        navLinks.forEach(link => link.classList.remove('active'));
                        const activeLink = document.querySelector('.category-nav-link[data-category-id="' + section.id.replace('category-', '') + '"]');
                        if (activeLink) activeLink.classList.add('active');
                        found = true;
                        break;
                    }
                }
                if (!found) navLinks.forEach(link => link.classList.remove('active'));
            }
            window.addEventListener('scroll', onScroll);
            onScroll();
        });

        function shareProduct(link, name) {
            if (navigator.share && /Mobi|Android|iPhone|iPad|iPod|Mobile|Tablet/i.test(navigator.userAgent)) {
                navigator.share({
                    title: name,
                    text: 'Check out this product!',
                    url: link
                }).catch(() => {});
            } else {
                navigator.clipboard.writeText(link).then(function() {
                    showToast('Product link copied!');
                });
            }
        }
        function showToast(msg) {
            let toast = document.createElement('div');
            toast.innerText = msg;
            toast.style.position = 'fixed';
            toast.style.bottom = '30px';
            toast.style.left = '50%';
            toast.style.transform = 'translateX(-50%)';
            toast.style.background = '#28a745';
            toast.style.color = '#fff';
            toast.style.padding = '10px 24px';
            toast.style.borderRadius = '8px';
            toast.style.zIndex = 9999;
            toast.style.fontWeight = 'bold';
            document.body.appendChild(toast);
            setTimeout(() => { toast.remove(); }, 1800);
        }
    </script>
}

<style>
    .shop-header-fixed {
        position: fixed;
        top: 0;
        z-index: 100;
        background: #fff;
        box-shadow: 0 2px 8px rgba(0,0,0,0.04);
        padding-top: 12px;
        padding-bottom: 8px;
        width: 100%;
        left: 0;
    }
    .shop-products-scroll {
        flex: 1 1 auto;
        overflow-y: auto;
        margin-top: 0;
        padding-bottom: 32px;
    }
    .category-nav-sticky {
        background: #fff;
        padding-bottom: 8px;
        margin-bottom: 8px;
    }
    .category-nav-scroll {
        overflow-x: auto;
        overflow-y: hidden;
        scrollbar-width: thin;
        scrollbar-color: #e3e3e3 #fff;
        -ms-overflow-style: none;
    }
    .category-nav-scroll::-webkit-scrollbar {
        height: 6px;
        background: #fff;
    }
    .category-nav-scroll::-webkit-scrollbar-thumb {
        background: #e3e3e3;
        border-radius: 4px;
    }
    .category-nav-scroll:hover::-webkit-scrollbar {
        height: 8px;
    }
    .category-nav-scroll::-webkit-scrollbar {
        display: none;
    }
    .category-nav-scroll:hover::-webkit-scrollbar {
        display: block;
    }
    .category-card {
        min-width: 180px;
        max-width: 220px;
    }
    .category-card:hover, .category-nav-link.active .category-card {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
        border: 2px solid #0d6efd;
    }
    .category-nav-link.active .category-card {
        background: #e3f2fd;
        color: #0d6efd;
    }
    .category-nav-link .category-card {
        border: 2px solid transparent;
        transition: border 0.3s;
    }
    .product-card:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        transition: all 0.3s ease;
    }
    .card-img-top {
        transition: transform 0.3s ease;
    }
    .product-card:hover .card-img-top {
        transform: scale(1.05);
    }
    .content-wrapper {
        padding: 20px;
        margin-top: 20px;
        min-height: calc(100vh - 200px);
    }
    .search-form {
        max-width: 500px;
        margin: 0 auto 12px auto;
    }
    .input-group .form-control {
        min-width: 0;
    }
</style>
